var org;
(function (org) {
    var suh;
    (function (suh) {
        var BarChart = (function () {
            function BarChart(parentEl, config) {
                if (!d3) {
                    throw new Error('Could not find D3');
                }
                this.parentEl = parentEl;
                this._rendered = false;
                this._config = config || {
                    margins: { top: 0, left: 0, right: 0, bottom: 0 },
                    categories: [],
                    legendLabels: []
                };
                var xAccessor = config.xAccessor || suh.identity;
                var yAccessor = config.yAccessor || suh.identity;
                var groupScale = this.groupScale = d3.scale.ordinal().rangeRoundBands([0, 100], .1);
                var xScale = this.xScale = d3.scale.ordinal();
                var colorScale = this.colorScale = d3.scale.ordinal()
                    .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);
                var yScale = this.yScale = (config && config.yScaleCreator && config.yScaleCreator()) || d3.scale.linear();
                this.xAxis = (config && config.xAxisCreator && config.xAxisCreator()) || d3.svg.axis().scale(this.groupScale).orient("bottom");
                this.yAxis = (config && config.yAxisCreator && config.yAxisCreator()) || d3.svg.axis().scale(this.yScale).orient("left");
                this.onResize = this.onResize.bind(this);
                window.addEventListener('resize', this.onResize);
            }
            BarChart.prototype.onResize = function () {
                this.render();
            };
            BarChart.prototype.setData = function (data) {
                this._data = data;
                return this;
            };
            BarChart.prototype.update = function () {
            };
            BarChart.prototype.render = function () {
                // let WW = jQuery(window).
                var posConfig = this.parentEl.getBoundingClientRect(), cfg = this._config, height = cfg.height || posConfig.height, width = cfg.width || posConfig.width, margins = cfg.margins, canvasWidth = width - margins.left - margins.right, canvasHeight = height - margins.top - margins.bottom, xDomain = [d3.min(this._data, function (e) {
                        return d3.min(e, cfg.xAccessor || suh.identity);
                    }), d3.max(this._data, function (e) {
                        return d3.max(e, cfg.xAccessor || suh.identity);
                    })], xRange = [0, width - margins.left - margins.right], yDomain = [
                    d3.min(this._data, function (e) {
                        return d3.min(e.countries, cfg.yAccessor || suh.identity);
                    }),
                    d3.max(this._data, function (e) {
                        return d3.max(e.countries, cfg.yAccessor || suh.identity);
                    })], yRange = [height - margins.bottom - margins.top, 0], groupAccessor = cfg.groupAccessor || suh.identity, itemAccessor = cfg.itemAccessor || suh.identity, xAccessor = cfg.xAccessor || suh.identity, yAccessor = cfg.yAccessor || suh.identity, colorScale = this.colorScale, groupScale = this.groupScale.rangeRoundBands([0, canvasWidth], .1), xScale = this.xScale, yScale = this.yScale, updateSet;
                console.log(yDomain);
                groupScale.domain(cfg.categories);
                console.log(cfg.legendLabels);
                xScale.domain(cfg.legendLabels)
                    .rangeRoundBands([0, groupScale.rangeBand()]);
                ;
                yScale.domain(yDomain)
                    .range(yRange);
                //   state.selectAll("rect")
                //       .data(function(d) { return d.ages; })
                //     .enter().append("rect")
                //       .attr("width", x1.rangeBand())
                //       .attr("x", function(d) { return x1(d.name); })
                //       .attr("y", function(d) { return y(d.value); })
                //       .attr("height", function(d) { return height - y(d.value); })
                //       .style("fill", function(d) { return color(d.name); });
                //   var legend = svg.selectAll(".legend")
                //       .data(ageNames.slice().reverse())
                //     .enter().append("g")
                //       .attr("class", "legend")
                //       .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });
                //   legend.append("rect")
                //       .attr("x", width - 18)
                //       .attr("width", 18)
                //       .attr("height", 18)
                //       .style("fill", color);
                //   legend.append("text")
                //       .attr("x", width - 24)
                //       .attr("y", 9)
                //       .attr("dy", ".35em")
                //       .style("text-anchor", "end")
                //       .text(function(d) { return d; });
                if (!this._rendered) {
                    this.el = d3.select(this.parentEl)
                        .append('svg')
                        .attr('width', posConfig.width)
                        .attr('height', posConfig.height);
                    this._canvas = this.el.append('g')
                        .attr('transform', 'translate(' + [margins.left, margins.top] + ')');
                    this.xAxisEl = this._canvas
                        .append('g')
                        .attr('class', 'x axis')
                        .attr('transform', 'translate(' + [0, height - margins.bottom - margins.top] + ')');
                    this.yAxisEl = this._canvas
                        .append('g')
                        .attr('transform', 'translate(' + [0, 0] + ')')
                        .attr('class', 'y axis');
                    this._rendered = true;
                }
                this.xAxisEl.call(this.xAxis);
                this.yAxisEl.call(this.yAxis);
                updateSet = this._canvas.selectAll(".data-group")
                    .data(this._data)
                    .attr("transform", function (d, i) { return "translate(" + groupScale(groupAccessor(d, i)) + ",0)"; });
                var rectsUpdateSet = updateSet.selectAll("rect")
                    .data(itemAccessor);
                rectsUpdateSet.attr("width", xScale.rangeBand())
                    .attr("x", function (d, i) { return xScale(xAccessor(d, i)); })
                    .attr("y", function (d, i) { return yScale(yAccessor(d, i)); })
                    .attr("height", function (d, i) { return canvasHeight - yScale(yAccessor(d, i)); })
                    .style("fill", function (d, i) { return colorScale(i); });
                rectsUpdateSet.exit()
                    .remove();
                rectsUpdateSet.enter()
                    .append("rect")
                    .attr("width", xScale.rangeBand())
                    .attr("x", function (d, i) { return xScale(xAccessor(d, i)); })
                    .attr("y", function (d, i) { return yScale(yAccessor(d, i)); })
                    .attr("height", function (d, i) { return canvasHeight - yScale(yAccessor(d, i)); })
                    .style("fill", function (d, i) { return colorScale(i); });
                this.el.attr('width', posConfig.width)
                    .attr('height', posConfig.height);
                var enterSet = updateSet.enter()
                    .append("g")
                    .attr("class", "data-group")
                    .attr("transform", function (d, i) { return "translate(" + groupScale(groupAccessor(d, i)) + ",0)"; });
                enterSet.selectAll("rect")
                    .data(itemAccessor)
                    .enter().append("rect")
                    .attr("width", xScale.rangeBand())
                    .attr("x", function (d, i) { console.log(xAccessor(d, i)); return xScale(xAccessor(d, i)); })
                    .attr("y", function (d, i) { return yScale(yAccessor(d, i)); })
                    .attr("height", function (d) { return canvasHeight - yScale(yAccessor(d)); })
                    .style("fill", function (d, i) { return colorScale(i); });
                updateSet.exit()
                    .remove();
            };
            return BarChart;
        }());
        suh.BarChart = BarChart;
    })(suh = org.suh || (org.suh = {}));
})(org || (org = {}));
var org;
(function (org) {
    var suh;
    (function (suh) {
        var DonutChart = (function () {
            function DonutChart(parentEl, config) {
                if (!d3) {
                    throw new Error('Could not find D3');
                }
                this.parentEl = parentEl;
                this._rendered = false;
                this._config = config || {
                    margins: { top: 0, left: 0, right: 0, bottom: 0 },
                    colors: ["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"],
                };
                var colorScale = this.colorScale = d3.scale.ordinal().range(config.colors);
                this.onResize = this.onResize.bind(this);
                window.addEventListener('resize', this.onResize);
                this.arcFn = d3.svg.arc();
                this.pieLayout = d3.layout.pie()
                    .sort(null)
                    .value(config.valueAccessor || org.suh.identity);
            }
            DonutChart.prototype.onResize = function () {
                this.render();
            };
            DonutChart.prototype.setData = function (data) {
                this._data = data;
                return this;
            };
            DonutChart.prototype.update = function () {
            };
            DonutChart.prototype.render = function () {
                var posConfig = this.parentEl.getBoundingClientRect(), cfg = this._config, height = cfg.height || posConfig.height, width = cfg.width || posConfig.width, colorScale = this.colorScale, margins = cfg.margins, radius = d3.min([height - margins.top - margins.bottom, width - margins.left - margins.right]) / 2, updateSet;
                this.arcFn.outerRadius(radius - 10)
                    .innerRadius(radius - 70);
                if (this._rendered) {
                    this.el.attr('width', posConfig.width)
                        .attr('height', posConfig.height);
                }
                else {
                    this.el = d3.select(this.parentEl)
                        .append('svg')
                        .attr('width', posConfig.width)
                        .attr('height', posConfig.height);
                    this._canvas = this.el.append('g')
                        .attr('transform', 'translate(' + [width / 2, height / 2] + ')');
                    updateSet = this._canvas
                        .selectAll('g.arc')
                        .data(this.pieLayout(this._data));
                    this._rendered = true;
                }
                var groups = updateSet.enter()
                    .append('g')
                    .attr('class', function (d, i, oi) {
                    return 'data-arc ' + ((cfg.lineClassFn && cfg.lineClassFn(d, i)) || '');
                });
                groups.append('path')
                    .style('fill', function (d, i) {
                    return colorScale(i);
                })
                    .attr('d', this.arcFn);
                updateSet.exit()
                    .remove();
            };
            return DonutChart;
        }());
        suh.DonutChart = DonutChart;
    })(suh = org.suh || (org.suh = {}));
})(org || (org = {}));
var org;
(function (org) {
    var suh;
    (function (suh) {
        function identity(e) {
            return e;
        }
        suh.identity = identity;
        var LineChart = (function () {
            function LineChart(parentEl, config) {
                if (!d3) {
                    throw new Error('Could not find D3');
                }
                this.parentEl = parentEl;
                this._rendered = false;
                this._config = config || {
                    margins: { top: 0, left: 0, right: 0, bottom: 0 },
                };
                var xAccessor = config.xAccessor || identity;
                var yAccessor = config.yAccessor || identity;
                var xScale = this.xScale = (config && config.xScaleCreator && config.xScaleCreator()) || d3.scale.linear();
                var yScale = this.yScale = (config && config.yScaleCreator && config.yScaleCreator()) || d3.scale.linear();
                this.xAxis = (config && config.xAxisCreator && config.xAxisCreator()) || d3.svg.axis().scale(this.xScale).orient("bottom");
                this.yAxis = (config && config.yAxisCreator && config.yAxisCreator()) || d3.svg.axis().scale(this.yScale).orient("left");
                this.onResize = this.onResize.bind(this);
                window.addEventListener('resize', this.onResize);
                this.lineFn = d3.svg
                    .line()
                    .defined(function (d, i) { return xAccessor(d, i); })
                    .x(function (e, i) {
                    return xScale(xAccessor(e, i));
                })
                    .y(function (e, i) {
                    return yScale(yAccessor(e));
                })
                    .interpolate("basis");
            }
            LineChart.prototype.onResize = function () {
                this.render();
            };
            LineChart.prototype.setData = function (data) {
                this._data = data;
                return this;
            };
            LineChart.prototype.update = function () {
            };
            LineChart.prototype.render = function () {
                var posConfig = this.parentEl.getBoundingClientRect(), cfg = this._config, height = cfg.height || posConfig.height, width = cfg.width || posConfig.width, margins = cfg.margins, xDomain = [d3.min(this._data, function (e) {
                        return d3.min(e, cfg.xAccessor || identity);
                    }), d3.max(this._data, function (e) {
                        return d3.max(e, cfg.xAccessor || identity);
                    })], xRange = [0, width - margins.left - margins.right], yDomain = [
                    d3.min(this._data, function (e) {
                        return d3.min(e, cfg.yAccessor || identity);
                    }),
                    d3.max(this._data, function (e) {
                        return d3.max(e, cfg.yAccessor || identity);
                    })], yRange = [height - margins.bottom - margins.top, 0], xScale = this.xScale, yScale = this.yScale, updateSet;
                xScale.domain(xDomain)
                    .range(xRange);
                yScale.domain(yDomain)
                    .range(yRange);
                if (this._rendered) {
                    updateSet = this._canvas
                        .selectAll('path.data-line')
                        .data(this._data)
                        .attr('d', this.lineFn);
                    this.xAxisEl.call(this.xAxis);
                    this.yAxisEl.call(this.yAxis);
                }
                else {
                    this.el = d3.select(this.parentEl)
                        .append('svg')
                        .attr('width', posConfig.width)
                        .attr('height', posConfig.height);
                    this._canvas = this.el.append('g')
                        .attr('transform', 'translate(' + [margins.left, margins.top] + ')');
                    this.xAxisEl = this._canvas
                        .append('g')
                        .attr('class', 'x axis')
                        .attr('transform', 'translate(' + [0, height - margins.bottom - margins.top] + ')');
                    this.xAxisEl.call(this.xAxis);
                    this.yAxisEl = this._canvas
                        .append('g')
                        .attr('transform', 'translate(' + [0, 0] + ')')
                        .attr('class', 'y axis');
                    this.yAxisEl.call(this.yAxis);
                    updateSet = this._canvas
                        .selectAll('path.data-line')
                        .data(this._data);
                    updateSet.attr('d', this.lineFn);
                    this._rendered = true;
                }
                this.el.attr('width', posConfig.width)
                    .attr('height', posConfig.height);
                updateSet.enter()
                    .append('path')
                    .attr('class', function (d, i, oi) {
                    return 'data-line ' + ((cfg.lineClassFn && cfg.lineClassFn(d, i)) || '');
                })
                    .attr('d', this.lineFn);
                updateSet.exit()
                    .remove();
            };
            return LineChart;
        }());
        suh.LineChart = LineChart;
    })(suh = org.suh || (org.suh = {}));
})(org || (org = {}));
